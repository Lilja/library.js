function returnChar(x){this.x={34:' ',35:'!',36:'"',37:'#',38:'$',39:'%',40:'&',41:'\'',42:'(',43:')',44:'*',45:'+',46:',',47:'-',48:'.',49:'1',50:'2',51:'3',52:'4',53:'5',54:'6',55:'7',56:'8',57:'9',58:'0',59:':',60:';',61:'<',62:'=',63:'>',64:'?',65:'@',66:'A',67:'B',68:'C',69:'D',70:'E',71:'F',72:'G',73:'H',74:'I',75:'J',76:'K',77:'L',78:'M',79:'N',80:'O',81:'P',82:'Q',83:'R',84:'S',85:'T',86:'U',87:'V',88:'W',89:'X',90:'Z',91:'[',92:']',93:'^',94:'_',95:'`',96:'a',97:'b',98:'c',99:'d',100:'e',101:'f',102:'g',103:'h',104:'i',105:'j',106:'k',107:'l',108:'m',109:'n',110:'o',111:'p',112:'q',113:'r',114:'s',115:'t',116:'u',117:'v',118:'w',119:'x',120:'y',121:'z',122:'{',123:'|',124:'}',125:'~',126:'€',127:'‚',128:'ƒ',129:'†',130:'‡',131:'ˆ',132:'‰',133:'Š',134:'‹',135:'Œ',136:'Ž',137:'‘',138:'’',139:'“',140:'”',141:'•',142:'Ä',143:'ä',144:'Å',145:'å',146:'Ö',147:'ö',148:'¤',149:'/',150:'¥'};return this.x[x]}function returnAscii(x){this.x={' ':34,'!':35,'"':36,'#':37,'$':38,'%':39,'&':40,'\'':41,'(':42,')':43,'*':44,'+':45,',':46,'-':47,'.':48,'1':49,'2':50,'3':51,'4':52,'5':53,'6':54,'7':55,'8':56,'9':57,'0':58,':':59,';':60,'<':61,'=':62,'>':63,'?':64,'@':65,'A':66,'B':67,'C':68,'D':69,'E':70,'F':71,'G':72,'H':73,'I':74,'J':75,'K':76,'L':77,'M':78,'N':79,'O':80,'P':81,'Q':82,'R':83,'S':84,'T':85,'U':86,'V':87,'W':88,'X':89,'Z':90,'[':91,']':92,'^':93,'_':94,'`':95,'a':96,'b':97,'c':98,'d':99,'e':100,'f':101,'g':102,'h':103,'i':104,'j':105,'k':106,'l':107,'m':108,'n':109,'o':110,'p':111,'q':112,'r':113,'s':114,'t':115,'u':116,'v':117,'w':118,'x':119,'y':120,'z':121,'{':122,'|':123,'}':124,'~':125,'€':126,'‚':127,'ƒ':128,'†':129,'‡':130,'ˆ':131,'‰':132,'Š':133,'‹':134,'Œ':135,'Ž':136,'‘':137,'’':138,'“':139,'”':140,'•':141,'Ä':142,'ä':143,'Å':144,'å':145,'Ö':146,'ö':147,'¤':148,'/':149,'¥':150};return this.x[x]}function stringsplice(b,c,d){var a=b.split('');a[c]=d;return a.join('')}var toType=function(a){return({}).toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function Encryption(a){this.developer=false;this.difference={};this.key=undefined;if(a==true){this.developer=true}}Encryption.prototype.Info=function(){return"Hi and welcome to this encryption function! \n Don'ts for this function: \n - Dont use '\'n' or backslashes in general. convert to <br> before encrypting."}Encryption.prototype.GenerateKey=function(){if(typeof this.key=="undefined"){var a=Math.random();if(a>0.5){a='-'}else{a='+'}this.key=Math.floor(Math.random()*20)+1;this.key=parseInt(a+this.key);return this.key}}Encryption.prototype.Encrypt=function(a,b){if(this.developer==true){console.log("------------------------------------- encrypting ------------------------------------- \n")}var c=a.split('');for(var i=0;i<a.length;i++){var x=parseInt(returnAscii(c[i])+b);if(this.developer==true){console.log("Before if statement: "+x+" character: "+returnChar(returnAscii(c[i])))}if(x<34){this.difference[i]=34-x;x=149-this.difference[i];if(this.developer==true){console.log("- Non encrypted key: "+returnAscii(c[i])+" New buffered value with key: "+x)}}else if(x>149){this.difference[i]=149-x;x=34-this.difference[i];if(this.developer==true){console.log("- Non encrypted key: "+returnAscii(c[i])+" New buffered value with key: "+x)}}else{if(this.developer==true){console.log("- Non encrypted key: "+returnAscii(c[i])+" New buffered value with key: "+x);console.log("nothing needs to be done")}}if(this.developer==true){console.log("After if statement: "+x+" Encrypted: "+returnChar(x))}c[i]=returnChar(x);var t=c.join('');if(i>250){break}if(this.developer==true){console.log("Encrypt - put in: "+c+"\n")}}if(this.developer==true){console.log("--- encrypting done \n")}return t}Encryption.prototype.Decrypt=function(a,b){if(this.developer==true){console.log("------------------------------------- decrypting ------------------------------------- \n")}var c=a.split('');for(var j=0;j<a.length;j++){var d=parseInt((returnAscii(c[j])));if(this.developer==true){console.log("ascii val: "+returnAscii(c[j])+" temparray val: "+c[j]+" Whole array: "+c);console.log("pre-temp change: "+d)}if(this.difference[j]<0){var x=d-34;d=x+149;if(this.developer==true){console.log("less is called, temp is now: "+d+" x: "+x)}}else if(this.difference[j]>0){var x=d-149;d=x+34;if(this.developer==true){console.log("greater is called, temp is now: "+d+" x: "+x)}}else{if(this.developer==true){console.log("nope temp does not intersect: "+d)}}if(b>0){d=d-b;if(this.developer==true){console.log("key > 0");console.log("key: "+b+" temp: "+d+" temp + key: "+parseInt(d+b))}}else if(b<0){var e=Math.abs(b);d=e+d;if(this.developer==true){console.log("key < 0");console.log("key: "+b+" temp: "+d+" temp + key: "+parseInt(d+b))}}if(this.developer==true){console.log("Post-temp change: "+d+" Post attemped decrypt: "+returnChar(d)+"\n")}c[j]=stringsplice(c[j],0,returnChar(d));if(j>250){break}if(this.developer==true){console.log("this is the end-result: "+c)}}c=c.join('');if(this.developer==true){console.log("--- decrypting done \n")}return c}
window.Get_Var=function(e){var a;var b={};a=document.URL;var c=a.substring(a.indexOf("?")+1).replace(a.substring(a.indexOf("#")),'').replace(/&/g,'|').replace(/=/g,'|').split('|');for(var i=0;i<c.length;i++){if(i%2==0){b[c[i]]=c[i+1]}}if(typeof e==="undefined"){return b}else if(typeof e==="string"){return b[e]}else{return b}}